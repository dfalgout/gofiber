// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: todos.sql

package dal

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one

INSERT INTO todos ( name, complete ) VALUES ( ?, ? ) RETURNING id, name, complete
`

type CreateTodoParams struct {
	Name     string
	Complete sql.NullBool
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.Name, arg.Complete)
	var i Todo
	err := row.Scan(&i.ID, &i.Name, &i.Complete)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec

DELETE FROM todos WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one

SELECT id, name, complete FROM todos WHERE id = ? LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Name, &i.Complete)
	return i, err
}

const listTodos = `-- name: ListTodos :many

SELECT id, name, complete FROM todos ORDER BY name
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Name, &i.Complete); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one

UPDATE todos set name = ?, complete = ? WHERE id = ? RETURNING id, name, complete
`

type UpdateTodoParams struct {
	Name     string
	Complete sql.NullBool
	ID       int64
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.Name, arg.Complete, arg.ID)
	var i Todo
	err := row.Scan(&i.ID, &i.Name, &i.Complete)
	return i, err
}
